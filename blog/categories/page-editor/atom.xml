<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Page Editor | Ramblings of a Hybrid Web Developer]]></title>
  <link href="http://jrodsmitty.github.io/blog/categories/page-editor/atom.xml" rel="self"/>
  <link href="http://jrodsmitty.github.io/"/>
  <updated>2014-12-23T21:46:30-06:00</updated>
  <id>http://jrodsmitty.github.io/</id>
  <author>
    <name><![CDATA[Jarrod Smith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resolving JQuery Conflicts in Page Editor]]></title>
    <link href="http://jrodsmitty.github.io/blog/2014/11/12/resolving-jquery-conflicts-in-page-editor/"/>
    <updated>2014-11-12T19:49:03-06:00</updated>
    <id>http://jrodsmitty.github.io/blog/2014/11/12/resolving-jquery-conflicts-in-page-editor</id>
    <content type="html"><![CDATA[<p>In the current project I&rsquo;m working on, we are using Bootstrap&rsquo;s &ldquo;collapse&rdquo; functionality (<a href="http://getbootstrap.com/javascript/#collapse">http://getbootstrap.com/javascript/#collapse</a>) for some of our components. Our requirements dictate that all accordions on the page be in the collapsed state, so in &ldquo;Edit&rdquo; mode of Page Editor, we&rsquo;d like them all expanded for ease of editing. The easiest way to accomplish this is to check for the PageMode, and execute some JQuery code to .collapse(&lsquo;show&rsquo;) all accordions on the page.</p>

<p>This seems like a fairly simple task (assuming we know JQuery decently well), but we run into some issues because our page&rsquo;s layout is using JQuery 2.1.1, but Sitecore loads JQuery 1.10.2 when using Page Editor, so we run into a JQuery version conflict, and in our case, all our calls to $(element).on(&lsquo;click&rsquo;, function() {..}) fail, because 1.10.2 doesn&rsquo;t support the .on() method.</p>

<h2>There are a couple ways to deal with this:</h2>

<ol>
<li>Give up using a different version of JQuery, and just include and use version 1.10.2 throughout the site.</li>
<li>Utilize JQuery.noConflict() and some other tricks to get things to work with version 2.1.1.</li>
</ol>


<p>We really wanted to use version 2.x of JQuery since our project requirements let us ignore (for the most part) older browsers, and all the code-bloat in JQuery 1.x that handles older browser quirks for browsers like Internet Explorer has been removed in v2. So for our situation, we chose to go with option 2.</p>

<p>Page Editor loads its version of JQuery after we do during the page rendering (ours is within the head tag), so by the time we call our JQuery code, the global &ldquo;JQuery&rdquo; object now represents the older 1.10.2 version instead of 2.1.1, so our code throws the error &ldquo;Uncaught TypeError: undefined is not a function&rdquo;</p>

<h3>Here was our solution:</h3>

<p><em>NOTE: We&rsquo;re using an MVC view for our component</em></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@using Sitecore.Mvc;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;div class="panel panel-default">
</span><span class='line'>    &lt;div class="panel-heading collapsed" data-toggle="collapse-next" aria-expanded="false">
</span><span class='line'>        &lt;h4 class="panel-title">
</span><span class='line'>            @Html.Sitecore().Field("Heading")
</span><span class='line'>        &lt;/h4>
</span><span class='line'>    &lt;/div>
</span><span class='line'>
</span><span class='line'>    &lt;div class="panel-collapse collapse">
</span><span class='line'>        &lt;div class="panel-body">
</span><span class='line'>            @Html.Sitecore().Placeholder("collapsiblecontent")
</span><span class='line'>        &lt;/div>
</span><span class='line'>    &lt;/div>
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>@if (Sitecore.Context.PageMode.IsPreview)
</span><span class='line'>{
</span><span class='line'>    &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js">&lt;/script>
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;script>
</span><span class='line'>    var $jq2 = jQuery.noConflict();
</span><span class='line'>    $jq2(function() {
</span><span class='line'>        if (IsPageEditorEditing()) {
</span><span class='line'>            $jq2('[data-toggle=collapse-next]').next().collapse('show');
</span><span class='line'>        } else {
</span><span class='line'>            $jq2('[data-toggle=collapse-next]').next().removeClass('in');
</span><span class='line'>            $jq2('[data-toggle=collapse-next]').on('click', function() {
</span><span class='line'>                $jq2(this).next().collapse('toggle');
</span><span class='line'>            });
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>&lt;/script>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<ol>
<li>LINE 17: To combat this &ldquo;re-defining&rdquo; of JQuery version, we first re-include our version of JQuery if we&rsquo;re in Preview Mode.</li>
<li>LINE 23: We add our code using a re-scoped variable for the global &ldquo;jQuery&rdquo; object.</li>
<li>LINE 49: In active &ldquo;editing&rdquo; mode, we force all accordions to stay expanded, otherwise they function normally.</li>
</ol>


<p>Although it feels dirty re-including jquery like this, if you really need to be using a different version of JQuery other than what Sitecore includes, this is (at least one) workable way to accomplish that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sitecore Fix: Partially-cut-off 'Add to Here' Button in Page Editor]]></title>
    <link href="http://jrodsmitty.github.io/blog/2014/11/05/sitecore-fix-for-partially-cut-off-add-to-here-button-in-page-editor/"/>
    <updated>2014-11-05T22:40:39-06:00</updated>
    <id>http://jrodsmitty.github.io/blog/2014/11/05/sitecore-fix-for-partially-cut-off-add-to-here-button-in-page-editor</id>
    <content type="html"><![CDATA[<p>Ever since we first installed Sitecore 7.2 rev. 140228 (first release), we have noticed an odd visual bug in Page Editor. We have since uninstall/reinstalled to be at the latest release: 7.2 rev. 140526. However, we still see the issue. There appears to be a small rectangular &ldquo;knock-out&rdquo; overlaying the bottom edge of the &ldquo;Add to here&rdquo; button. I was able to track it down to the &ldquo;webedit.css&rdquo; file in the root /Website folder where Sitecore is installed.</p>

<p><img src="/images/add-here-bug.png" title="[100%] [auto] [Page Editor Bug [Page Editor Bug]]" ></p>

<p>In the webedit.css file, line 604, I changed &ldquo;height: 11px;&rdquo; to &ldquo;height: 24px;&rdquo; and that fixed the issue.</p>

<p><img src="/images/add-here-bug-fixed.png" title="[100%] [auto] [Page Editor Bug Fix [Page Editor Bug Fix]]" ></p>

<h3>UPDATE (11/6/14)</h3>

<p>I contacted Sitecore support about this bug, and they weren&rsquo;t able to reproduce the issue with a clean install of 7.2. I thought that was kind of odd, since I have also noticed the bug during a demo of Sitecore 8 at the Milwaukee Sitecore Meetup group. The presenter was demoing the Experience Editor (previously Page Editor), and lo and behold, there it was!</p>

<p>After sending more information to Sitecore support, it turns out that the issue was/is caused by using &ldquo;border-box&rdquo; instead of &ldquo;content-box&rdquo; on some of their UI elements. We are using Bootstrap, which via its styles, was applying &ldquo;content-box&rdquo; to the element with the &ldquo;.scInsertionHandleCenter&rdquo; class.</p>

<p>The two recommended solution(s) from Sitecore are:</p>

<ol>
<li>Remove box-sizing: border-box for * or div from site.min.css if possible.</li>
<li>Add the following style in your site&rsquo;s design CSS:
<code>
 .scInsertionHandleCenter
 {
   box-sizing: content-box !important;
   -webkit-box-sizing: content-box !important;
   -moz-box-sizing: content-box !important;
  }
</code></li>
</ol>

]]></content>
  </entry>
  
</feed>
